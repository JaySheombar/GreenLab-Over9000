/**
  auther:f7
  date:2013.03
  edit:2013.12
  versions:2.0.1[变形版--为多语种分站调整]
  注意：该版本不支持IE6，并且仅部分DOM属性，使用时请测试并调整
*/


/**
 * 固定位置模块
 * @param {HTMLElement/Array} elem 需要定位的节点ID或节点本身
 * @param {[Object]} o    [扩展参数]
 * @config {[Function]} callback    [每次滚动完成时的回调]
 * @config {[Function]} showCallback    [显示模块时的回调]
 * @config {[Function]} hideCallback    [隐藏模块时的回调]
 * @config {[Function]} startScrollCallback    [开始滚动回调]
 * @config {[Function]} restorationCallback    [复位回调]
 */
function FixedModule(elem, o) {
    if ( !(this instanceof FixedModule) ) {
        return new FixedModule( elem, o );
    };
    var elem = typeof(elem) == "string" ? document.getElementById(elem) : elem;
    if ( elem.nodeType != 1 && elem.length == "undefined" ) {
        return false;
    };

    if ( this.ie == 6 ) { return false };// IE6 跳出

    this.elem = elem;
    this.o = o || {};
    this.items = [];
    this.look;// 可见状态
    this.scroll;// 滚动状态
    this.stopScroll;// 程序停止状态
    
    this.init(elem, o);
    this.event();
    this.cpu();
};
FixedModule.prototype.getCss = function (who,key) {
    if ( who.style[key]!='' ) {
        return who.style[key];
    };
    if ( !!window.ActiveXObject ) {
        return who.currentStyle[key];
    } else {
        return document.defaultView.getComputedStyle(who,"").getPropertyValue(key.replace(/([A-Z])/g,"-$1").toLowerCase());
    };
};
/** 
 * 获取元素到页面的坐标
 * @method pageY
 * @static
 * @param {HTMLElement} elem 目标元素
 * @return 返回光标y轴坐标
 * @remark 元素到页面的坐标
 */
FixedModule.prototype.pageY = function(elem) {
	return elem.offsetParent ? (elem.offsetTop + this.pageY(elem.offsetParent)) : elem.offsetTop;
};
FixedModule.prototype.ie = /msie (\d+\.\d+)/i.test(navigator.userAgent) ? (document.documentMode || + RegExp['\x241']) : undefined;
FixedModule.prototype.on = function( elem, type, listener ){
    type = type.replace(/^on/i, '').toLowerCase();
    /*var realListener = function(ev){// 修正this  ie中 attachEvent 的this为window     这里如果使用了this修正，cn.un移除事件将不起作用
        listener.call(elem, ev);
    };*/
    var realListener = listener;
    // 事件监听器挂载
    if( elem.addEventListener ) {
        elem.addEventListener(type, realListener, false);
    } else if ( elem.attachEvent ) {
        elem.attachEvent('on' + type, realListener);
    };
    return elem;
};
FixedModule.prototype.getPageHeight = function(){
    var de=document.documentElement;
    return document.body.scrollHeight||(de&&de.scrollHeight);
};
FixedModule.prototype.windowHeight = function(){
    var de = document.documentElement;
    return self.innerHeight||(de && de.offsetHeight)||document.body.offsetHeight;
};
FixedModule.prototype.init = function (elem, o) {// 准备数据
    if ( elem.nodeType == 1 ) {
        this.items.push(elem);
    } else if ( elem.length != "undefined" ) {
        this.items = elem;
    };

    for ( var i=0,l=this.items.length; i<l; i++ ) {
        this.items[i].setAttribute("fixed-init-top", parseInt(this.pageY(this.items[i])));
        this.items[i].setAttribute("fixed-init-position", this.getCss(this.items[i], "position"));
    };
};
FixedModule.prototype.event = function () {// 注册事件
    var that = this;
    this.on(window, "scroll", function () {
        that.cpu();
    });
    this.on(window, "resize", function () {
        that.cpu();
    });
};
FixedModule.prototype.cpu = function () {// 处理器
    for ( var i=0,l=this.items.length; i<l; i++ ) {
        this.move(this.items[i], this.items[i].getAttribute("fixed-init-top"));
    };

    if ( this.o.callback && this.scroll ) {// 每次滚动的回调
        this.o.callback(this);
    };
};
FixedModule.prototype.move = function ( elem, elemTop ) {// 非fixed时的移动
    var that = this,
        myhtml = document.getElementsByTagName('html')[0],
        mybody = document.getElementsByTagName('body')[0],
        elemHeight = elem.scrollHeight,
        removeTop = Math.max(myhtml.scrollTop, mybody.scrollTop),
        winHeight = this.windowHeight(),
        pageHeight = this.getPageHeight(),
        elemTop = parseInt(elemTop),
        elemBottom = parseInt(this.getCss(elem,'bottom')),
        _top = 0,
        _bottom = 0,


        F_I_top = parseInt(elem.getAttribute("fixed-init-top")),
        F_T_hide = parseInt(elem.getAttribute("fixed-top-hide")),
        F_B_hide = parseInt(elem.getAttribute("fixed-bottom-hide")),
        F_T_stop = parseInt(elem.getAttribute("fixed-top-stop")),
        F_B_stop = parseInt(elem.getAttribute("fixed-bottom-stop")),
        F_T_show = parseInt(elem.getAttribute("fixed-top-show")),
        F_B_show = parseInt(elem.getAttribute("fixed-bottom-show")),
        F_W_T_start = parseInt(elem.getAttribute("fixed-win-top-start")),
        F_W_B_start = parseInt(elem.getAttribute("fixed-win-bottom-start"));
        F_E_height = parseInt(elem.getAttribute("fixed-elem-height"));
        
    if ( elemTop >= 0 ) {
        _top = elemTop + removeTop;
        
    };
    //console.log(elem, this.getCss(elem,'right'));
    if ( elemBottom >= 0 ) {
        _top = winHeight + removeTop - elemHeight - elemBottom;
        
    };

    // elem.style.position = "fixed";

    // 相关回调
    function show() {
        elem.style.display = "block";
        if ( that.o.showCallback && that.look === false ) {// 显示回调
            that.o.showCallback(that);
        };
        that.look = true;
    };

    function startScroll(str, n) {
        if ( str == "top" ) {
            elem.style.position = "fixed";
            elem.style.top = n +'px';
        } else if ( str == "bottom" ) {
            elem.style.position = "fixed";
            elem.style.bottom = n +'px';
            elem.style.top = 'auto';
        };

        if ( that.o.startScrollCallback && ( !that.scroll || that.scroll === false ) ) {// 开始滚动回调
            that.o.startScrollCallback(that);
        };
        that.scroll = true;
    };

    function stopScroll(n) {
        elem.style.position = "absolute";
        elem.style.top = n +'px';
        // if ( that.o.stopScrollCallback && that.stopScroll === false ) {// 停止滚动回调
        //     that.o.stopScrollCallback(that);
        // };
        // that.stopScroll = true;
    };

    function hide() {
        elem.style.display = "none";
        if ( that.o.hideCallback && that.look === true ) {// 隐藏回调
            that.o.hideCallback(that);
        };
        that.look = false;
    };

    function restoration() {
        elem.style.position = elem.getAttribute("fixed-init-position");
        elem.style.top = elem.getAttribute("fixed-init-top") + "px";
        if ( that.o.restorationCallback && that.scroll === true ) {// 复位回调
            that.o.restorationCallback(that);
        };
        that.scroll = false;
    };

    // 距离顶部一定区域显示
    if ( F_T_show || F_T_show === 0 ) {
        _top <= F_T_show ? show() : hide();
    };

    // 距离底部一定区域显示
    if ( F_B_show || F_B_show === 0 ) {
        _bottom = pageHeight - _top - elemHeight;
        _bottom <= F_B_show ? show() : hide();
    };

    // 距离窗口顶部一定距离时开始滚动
    if ( F_W_T_start || F_W_T_start === 0 ) {
        removeTop + F_W_T_start >= F_I_top ? startScroll("top", F_W_T_start) : restoration();
    };

    // 距离窗口底部一定距离时开始滚动
    if ( F_W_B_start || F_W_B_start === 0 ) {
        winHeight + removeTop >= F_I_top + elemHeight + F_W_B_start ? startScroll("bottom", F_W_B_start) : restoration();
    };

    // 距离顶部一定区域隐藏
    if ( F_T_hide || F_T_hide === 0 ) {
        _top <= F_T_hide ? hide() : show();
    };

    // 距离底部一定区域隐藏
    if ( F_B_hide || F_B_hide === 0 ) {
        _bottom = pageHeight - _top - elemHeight;
        _bottom <= F_B_hide ? hide() : show();
    };

    // 距离顶部一定区域停止滚动
    if ( F_T_stop || F_T_stop === 0 ) {
        
        if ( _top <= F_T_stop ) {
            stopScroll(F_T_stop);
        };
    };

    // 距离底部一定区域停止滚动
    if ( F_B_stop || F_B_stop === 0 ) {
        if ( F_E_height && elemHeight == 0 ) {
            elemHeight = F_E_height;
        };
        if ( elemHeight > winHeight ) {
        	_bottom = pageHeight - removeTop - winHeight + (F_W_B_start || 0);
        } else {
        	_bottom = pageHeight - removeTop - elemHeight - (F_W_T_start || 0);
        };
        
        if ( _bottom <= F_B_stop ) {
            stopScroll(pageHeight - elemHeight - F_B_stop);
        };
    };

};